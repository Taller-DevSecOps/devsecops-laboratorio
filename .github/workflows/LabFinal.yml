name: Laboratorio Final DevSecOps

on:
  push: 
    branches: ["**"]          # se ejecuta en cada commit a cualquier rama

permissions:
  contents: read
  security-events: write
  pull-requests: read

jobs:
  anlisis-SAST:
    runs-on : ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        #with:
          #fetch-depth: 0  
      
      - name: Variables de Entorno y contexto
        run: |
          echo "Verificando Variables..."
          echo "Repositorio              : $GITHUB_REPOSITORY"
          echo "Actor                    : $GITHUB_ACTOR"
          echo "Evento                   : $GITHUB_EVENT_NAME"
          echo "Branch                   : $GITHUB_REF_NAME"
          echo "Commit                   : $GITHUB_SHA"
          echo "Sonar host URL           : https://sonarcloud.io"

      #- name: Debug - Listar variables
      #  if: ${{ github.event_name != 'pull_request' }} 
      #  run: |
      #    echo "Variables disponibles (recortadas):"
      #    printenv | sort | sed -e 's/\(.*TOKEN=\).*/\1*** (masked)/g' | head -n 60

      - name: Debug - Confirmar secreto existe en GitHub
        run: |
          if [ -n "${{ secrets.SONAR_TOKEN_DevSecOps }}" ]; then
            echo "GitHub ve el secreto SONAR_TOKEN_DevSecOps (valor oculto)"
          else
            echo "GitHub NO encuentra el secreto SONAR_TOKEN_DevSecOps"
            #exit 1
          fi

      - name: Debug - Confirmar variable de entorno SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_DevSecOps }}
        run: |
          if [ -n "${SONAR_TOKEN}" ]; then
            echo "SONAR_TOKEN está definido en el entorno (valor oculto)"
          else
            echo "SONAR_TOKEN no está en el entorno"
            exit 1
          fi

      - name: analisis de Codigo SAST
        id: AnalisisSAST
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Github lo configura de forma automatica, no es necesario incluirlo 
          #SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }} 
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN_DevSecOps }} 

      # 4) Ejecutar análisis SonarCloud (v6)
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Resultado SAST
        if: ${{ success() }}
        run: echo "SAST finalizado. Revisa el Quality Gate en SonarCloud."


#  anlisis-SCA:
#    runs-on : ubuntu-latest
#    #needs: [AnalisisSAST]  # este job corre después de AnalisisSAST
#    steps:
#      - name: analisis de Codigo SCA
#        run:
#          echo "analisis de Codigo SCA"
          
#  Build-Docker:
#    runs-on : ubuntu-latest
#    steps:
#      - name: Build Docker
#        run:
#          echo "Build Docker"
##      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)


#  Image-Security:
#    runs-on : ubuntu-latest
#    steps:
#      - name: Image Security
#        run:
#          echo "Image Security"


#1. Clonación del repositorio.
#2. Ejecutar SAST -> Usar SonarCloud o herramienta similar.
#3. Ejecutar SCA ->Usar Dependency Check o similar.
#4. Construcción de la Imagen Docker.
#5. Image Security -> Usar Trivy o similar.
  
